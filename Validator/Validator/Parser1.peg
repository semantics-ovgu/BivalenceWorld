@namespace Validator
@classname PegPL1Parser
@using System.Linq;
@using Validator
@accessibility internal
@members
{
	private List<Argument> BuildArguments(List<Argument> list, Argument argument)
	{
		list.Add(argument);
		return list;
	}

	private List<Formula> BuildGenericFormula(Formula formula, Formula argument)
	{
		return new List<Formula> { argument, formula };
	}

	private Formula BuildQuantum(string quantumSymbol, Variable variable, Formula formula)
	{
		if(quantumSymbol == "\u2200")
			return new Quantum(EQuantumType.All, formula, variable, "Allquantum", "Allquantum");
		else if(quantumSymbol == "\u2203")
			return new Quantum(EQuantumType.Exist, formula, variable, "Existquantum", "Existquantum");

		return new Quantum(EQuantumType.None, formula, variable, "Nonequantum", "Nonequantum");
	}
}

//Entry point: Formula
formulaBegin <Formula> = " "* formula:formula " "* !.+ { formula }

//Formula
formula <Formula> = biconditional / implication / conjunction / disjunction / singleExpression

//Implication
implication <Formula>	= singleExpression:singleExpression implicationSymbol formula2:formula { new Implication(singleExpression, formula2, "Implication", "Implication") }

//Biconditional
biconditional <Formula>	= singleExpression:singleExpression biconditionalSymbol formula2:formula { new Biconditional(singleExpression, formula2, "Biconditional", "Biconditional") }

//Conjunction
conjunction <Formula>	= singleExpression:singleExpression conjunctionSymbol conjunctionPart:conjunctionPart { new Conjunction(BuildGenericFormula(conjunctionPart, singleExpression), "Conjunction", "Conjunction") }

conjunctionPart <Formula>	= singleExpression:singleExpression conjunctionSymbol conjunctionPart:conjunctionPart { new Conjunction(BuildGenericFormula(conjunctionPart, singleExpression), "Conjunction", "Conjunction") }
							/ formula

//Disjunction
disjunction <Formula>	= singleExpression:singleExpression disjunctionSymbol disjunctionPart:disjunctionPart { new Disjunction(BuildGenericFormula(disjunctionPart, singleExpression), "Disjunction", "Disjunction") }

disjunctionPart <Formula>	= singleExpression:singleExpression disjunctionSymbol disjunctionPart:disjunctionPart { new Disjunction(BuildGenericFormula(disjunctionPart, singleExpression), "Disjunction", "Disjunction") }
							/ formula
														
//Single expression
singleExpression <Formula> = parenthese / quantum / negation / equals / notEquals / predicate

//Parenthese
parenthese <Parenthese> = "(" " "* formula:formula " "* ")" { new Parenthese(formula) }

//Quantum
quantum <Formula>	= quantumSymbol:quantumSymbol " "* variable:variable " "* singleExpression:singleExpression { BuildQuantum(quantumSymbol, variable, singleExpression) }

//Negation
negation <Formula> = negationSymbol " "* singleExpression:singleExpression { new Negation(singleExpression) }

//Equals
equals <Formula> = const1:singleArgument equalsSymbol const2:singleArgument { new Equals(const1, const2) }

//NotEquals
notEquals <Formula> = const1:singleArgument notEqualsSymbol const2:singleArgument { new Negation(new Equals(const1, const2)) }

//Predicate
predicate <Formula> = n:predicateString openedBracket argument:argument closedBracked { new Predicate(argument, n,n) }

//Function
function <Argument> = n:functionString openedBracket argument:argument closedBracked { new Function(argument, n,n) }

//Arguments
argument <List<Argument>> -memoize	= argument:argument argumentDelimiter constant:constant  { BuildArguments(argument, constant)}
									/ argument:argument argumentDelimiter variable:variable  { BuildArguments(argument, variable)}
									/ singleArgument:singleArgument { new List<Argument> { singleArgument }}

//Single Argument
singleArgument <Argument> = function / constant / variable

//Constant
constant <Constant> = constant:constantstring { new Constant(constant,constant) }

//Variable
variable <Variable> = variable:variableString { new Variable(variable.First(),variable.First()) }

constantstring = "" ([a-t]i)+
functionString = "" [a-z] ([a-z]i)*
predicateString = "" [A-Z] ([a-z]i)*
variableString = ([u-z]i)<1>

openedBracket = " "* "(" " "*
closedBracked = " "* ")" " "*
conjunctionSymbol = " "* "\u2227" " "*
disjunctionSymbol = " "* "\u2228" " "*
biconditionalSymbol = " "* "\u2194" " "*
implicationSymbol = " "* "\u2192" " "*
negationSymbol = " "* "\u00ac" " "*
argumentDelimiter = " "* "," " "*
quantumSymbol = [\u2200,\u2203]
equalsSymbol = " "* "=" " "*
notEqualsSymbol = " "* "\u2260" " "*
